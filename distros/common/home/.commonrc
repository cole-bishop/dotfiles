# ensure usability of delete key in shell.
which bindkey > /dev/null 2>&1 && bindkey "^[[3~" delete-char
which setopt > /dev/null 2>&1 && setopt auto_cd
[[ -r "/usr/share/z/z.sh" ]] && source /usr/share/z/z.sh
# nvm
[ -f /usr/share/nvm/init-nvm.sh ] && source /usr/share/nvm/init-nvm.sh
# npm no longer needs root to install packages.
PATH="$HOME/.node_modules/bin:$PATH"
export npm_config_prefix=~/.node_modules
# z. If installed from brew
[ -f "$(brew --prefix)/etc/profile.d/z.sh" ] && source "$(brew --prefix)/etc/profile.d/z.sh"
# ssh agent
# this line is used if using wsl2.
[[ $XDG_RUNTIME_DIR == "" ]] && export XDG_RUNTIME_DIR="$HOME/.xdg_runtime_dir" && mkdir "$HOME/.xdg_runtime_dir" 2> /dev/null
if ! pgrep -u "$USER" ssh-agent > /dev/null; then
   ssh-agent > "$XDG_RUNTIME_DIR/ssh-agent.env"
fi
if [[ ! "$SSH_AUTH_SOCK" ]]; then
   eval "$(<"$XDG_RUNTIME_DIR/ssh-agent.env")" > /dev/null
fi
# tmux plugin manager tpm. Clone if not present.
[ ! -d "$HOME/.tmux/plugins/tpm" ] && git clone https://github.com/tmux-plugins/tpm "$HOME/.tmux/plugins/tpm"
# X settings
# which xset > /dev/null 2>&1 && xset -dpms
# fzf
if [ -n "$ZSH_VERSION" ]; then
  shell_extension=zsh
else
  shell_extension=bash
fi
# If 'ag' or 'fd' are found, utilize them passively for
# fzf for appropriate commands.
if which ag &> /dev/null; then
  COMMON_DEFAULT_COMMAND='ag --hidden -U -g ""' # utilizes $HOME/.agignore.
  export FZF_DEFAULT_COMMAND="$COMMON_DEFAULT_COMMAND"
  export FZF_CTRL_T_COMMAND="$COMMON_DEFAULT_COMMAND"
else
  export FZF_DEFAULT_COMMAND="find ."
  export FZF_CTRL_T_COMMAND="find ."
fi
# fzf for fd passive opt it
if which fd &> /dev/null; then
  export FZF_ALT_C_COMMAND="fd -t d -c never"
else
  export FZF_ALT_C_COMMAND="find . -type d|tail -n +2"
fi
  
# if one has ag
# which ag &> /dev/null && export FZF_DEFAULT_COMMAND='ag --hidden --ignore .git -g ""'

[ -f "$HOME/.fzf.$shell_extension" ] && source "$HOME/.fzf.$shell_extension"
# arch linux fzf locations.
[ -f "/usr/share/fzf/key-bindings.$shell_extension" ] && . "/usr/share/fzf/key-bindings.$shell_extension"
[ -f "/usr/share/fzf/completion.$shell_extension" ] && . "/usr/share/fzf/completion.$shell_extension"
# xbunutu fzf locations.
[ -f "/usr/share/doc/fzf/examples/key-bindings.$shell_extension" ] && . "/usr/share/doc/fzf/examples/key-bindings.$shell_extension"
[ -f "/usr/share/fzf/completion.$shell_extension" ] && . "/usr/share/fzf/completion.$shell_extension"
# mac fzf locations.
[ -f "/opt/local/share/fzf/shell/key-bindings.$shell_extension" ] && . "/opt/local/share/fzf/shell/key-bindings.$shell_extension"
[ -f "/opt/local/share/fzf/shell/completion.$shell_extension" ] && . "/opt/local/share/fzf/shell/completion.$shell_extension"

# nvm
# To prep for nvm (if using on WSL2), delete and uninstall all npm and node related
# artifacts from windows. Then install nvm with the following:
# https://docs.microsoft.com/en-us/windows/nodejs/setup-on-wsl2
# Below is what is appended to .bashrc upon installing nvm with their curl|bash command.
unset npm_config_prefix
export NVM_DIR="$HOME/.config/nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
# The following line should enable one to just open a new
# shell, and npm will start referencing the correct node location
# with nvm.
echo $NVM_BIN|sed 's/\/bin//g'|sed 's/^/prefix=/g' > "$HOME/.npmrc"
# If installing for the first time on WSL2, you will likely have to run:
# YOUR_NODE_VERSION=<your-node-version>
# nvm install $YOUR_NODE_VERSION 
# npm config delete prefix 
# npm config set prefix "$NVM_DIR/versions/node/$YOUR_NODE_VERSION"
# echo "$YOUR_NODE_VERSION" > "$HOME/.nvmrc" # unfortunately, it seems this file is the only way for nvm to select any node version upon a new login shell.
